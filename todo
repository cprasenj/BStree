algorithm (infix expression without parantheses works only for + - * and /)
	-> take first processed portion of expression and check if it is a number character
	->put the number in a node which is the first node of the tree
	->next take the second node 
	->if it is a operater make it the root node and keep the first node as the left node of the root node
	->take input which is an oeprand and make it the right node of the root node
	->take the next input (oprator) and make it the left child of the node 
	and repeate this process with every subtree
	->if the root of subtree is * or / we have to shift the entire subtree and make it the left child of the current operator node
===================================================================================================================================
TODO :(infix to post fix notation)
-----
1->create Node
	structure with a data field and two pointer fields which points two childs
	struct Node {
		void* data;
		struct Node* leftChild;
		struct Node* rightChild;
		void (*f)(int a, int b);
	};
	[data will be receaved as void*]

2->check whether operator or not
	int isOperator(char)[returns 0 or 1]
3->branchRotator
4->subTreeShifter
5->root pointer points the root node
 
===================================================================================================================================
tree:
-----

structure of each node {
	data;
	leftChild;
	rightChild;	
}

structure of tree {
	root;[points to root];
	count;[number of node];
}

1-->createTree[will initialize the tree]
2-->createTreeNode[will create each node]
3-->insertNode[will insert new node in the existing tree]
4-->findPosition[will find where to put the new node]
5-->giveDirection[will tell whether to go right or left]
6-->attachNode[will attach the given node to its proper position]
=====================================================================================================================================











